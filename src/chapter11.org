#+TITLE: Paradigms of AI Programming: Chapter 11
#+AUTHOR: Tushar Tyagi
#+EMAIL: mail@tushartyagi.com
#+LANGUAGE: en
#+STARTUP: align indent fold nodlcheck hidestars oddeven lognotestate
#+PROPERTY: header-args :tangle chapter11.lisp

#+name: package-init
#+begin_src lisp :session paip 
  (in-package :paip)
#+end_src

#+RESULTS: package-init
: #<PACKAGE "PAIP">

* Ideas behind Prolog

  As a programming language, Prolog depends on 3 key ideas:

  1. Prolog is relational, both in terms of datastructure (it has a single
     relational DB as its storage) and the way programs are written.
  2. It uses non-changing, non-assignable logic variables. These variables are
     defined in terms of "facts" and are therefore final.
  3. The programs use automatic backtraking by default. Once the progam is
     written, the values are found via querying the database. In case the
     relation doesn't hold good for the query, it automatically backtracks to
     the correct relation.

* Implementations

** Idea 1: The Database

   - The Prolog interpreter is going to be implemented in Lisp, and would
     therefore use a Lispy syntax.
   - The database stores assertions called *clauses* which are of two types:
     + Facts: These are always true. The syntax of rules is:
       =(<- (relationship object1 object2 ... objectN))=
       =(<- (capital Toronto Ontario))=
       =(<- (likes Alice Bob))=
     + Rules: These hold dependent facts. The syntax is:
       =(<- (likes Sandy ?x) (likes ?x cats))=
       - The above rule states that Sandy likes anyone who likes cats.
       - The book calls the following statement /backward-chaining/: "If you
         ever want to know that Sandy likes some *X*, one way to do it is to
         show that *X* likes cats." This means that we move from the goal to the
         premise backwards. 
   - The first statement of a clause is called a /head/ and the rest are called
     /body/. 
   - The head is true only if each of the statements in the body is true. For
     facts, there's no body, so these are always true.
     =(<- (likes Kim ?x) (likes ?x Lee) (likes ?x Kim))= 
     This statement says Kim likes anyone who likes both Lee and Kim.

** Idea 2: Unification of Logic Variables

   - Pattern matching matches a list containing variables to a list containing
     values, sort of destructuring.
     #+begin_src lisp
     (pat-match '(?x . ?y) '(2 . 1)) ; ((?y . 2) (?x . 1))
     #+end_src

   - Unification means 2 patterns are matched against each other, each pattern
     may have a variable (called *logic variable*) and after matching both have
     a value. Unification also allows two variables to be matched to each other,
     and have the same (bounded or unbounded) value. 

     #+begin_src lisp
       (unify '(?x . 2) '(1 . ?y)) ; ((?y . 2) (?x . 1))
       (unify '(f . ?y) '(f . ?x)) ; ((?y . ?x))
     #+end_src

*** Pattern Matching

    #+begin_src lisp :session paip
      (defconstant fail nil "Indicates pat-match failure")

      (defconstant no-bindings '((t . t))
        "Indicates pat-match success, with no variables.")

      (defun variable-p (x)
        "Is x a variable (a symbol begining with ?x)"
        (and (symbolp x) (equal (char (symbol-name x) 0) #\?)))

      (defun get-binding (var bindings)
        "Find a (variable . value) pair in the binding list"
        (assoc var bindings))

      (defun binding-val (binding)
        "Get the value part of a single binding"
        (cdr binding))

      (defun lookup (var bindings)
        "Get the value part (for var) from a binding list"
        (binding-val (get-binding var bindings)))

      (defun extend-bindings (var val bindings)
        "Add a (var . value) pair to the binding list"
        (cons (cons var val)
              (if (and (eq bindings no-bindings))
                  nil
                  bindings)))

      (defun match-variable (var input bindings)
        "Does VAR match input? Uses (or updates) and return bindings."
        (let ((binding (get-binding var bindings)))
          (cond ((not binding) (extend-bindings var input bindings))
                ((equal input (binding-val binding)) bindings)
                (t fail))))
    #+end_src
